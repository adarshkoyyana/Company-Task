{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gamma\\\\OneDrive - K L University\\\\Desktop\\\\zithara-task\\\\frontend-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'; // Import CSS file for styling\n// function App() {\n//   const [customers, setCustomers] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const [search, setSearch] = useState('');\n//   const [totalPages, setTotalPages] = useState(0);\n//   const [sortBy, setSortBy] = useState('date'); // Default sort by date\n//   const [filteredData, setFilteredData] = useState([]);\n//   const recordsPerPage = 20;\n//   useEffect(() => {\n//     fetchData();\n//   }, [page, search]);\n//   const fetchData = async () => {\n//     try {\n//       let url = `http://localhost:8080/api/records?page=${page}&search=${search}&sortBy=${sortBy}`;\n//       if (search) {\n//         // If search is provided, add search filters for name and location columns\n//         url += `&customer_name=${search}&location=${search}`;\n//       }\n//       const response = await axios.get(url);\n//       setCustomers(response.data.slice((page - 1) * recordsPerPage, page * recordsPerPage));\n//       setTotalPages(Math.ceil(response.data.length / recordsPerPage));\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n//   // Function to handle sorting when sort button is clicked\n//   // const handleSort = (sortOption) => {\n//   //   if (sortBy !== sortOption) {\n//   //     setSortBy(sortOption);\n//   //     setPage(1); // Reset page to 1 when changing sort option\n//   //   }\n//   // };\n//   useEffect(() => {\n//     handleSort();\n//   }, [sortBy]);\n//   const handleSort = async(sortdate)=>{\n//     let url = `http://localhost:8080/api/records?page=${page}&search=${search}&sortBy=${sortBy}`;\n//     let response = await axios.get(url);\n//     const sortedData = [...filteredData].sort((a,b) =>{\n//       if(sortdate === 'date'){\n//         return new Date(a.created_at) - new Date(b.created_at);\n//       }else if (sortdate === 'time') {\n//         return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();\n//       }\n//     });\n//     setFilteredData({sortedData});     \n//   }\n//   // Function to format date and time\n//   const formatDate = (dateTimeString) => {\n//     const date = new Date(dateTimeString);\n//     return date.toLocaleDateString();\n//   };\n//   const formatTime = (dateTimeString) => {\n//     const time = new Date(dateTimeString);\n//     return time.toLocaleTimeString();\n//   };\n//   return (\n//     <div className=\"container\">\n//       <h1 className=\"heading\">Customer Records</h1>\n//       <div className=\"search-container\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search by Customer Name or Location\"\n//           value={search}\n//           onChange={(e) => setSearch(e.target.value)}\n//           className=\"search-input\"\n//         />\n//         <button onClick={fetchData} className=\"search-btn\">\n//           Search\n//         </button>\n//       </div>\n//       <div className=\"sorting-options\">\n//         <button onClick={ handleSort} className={`sort-btn ${sortBy === 'date' ? 'active' : ''}`}>\n//           Sort by Date\n//         </button>\n//         <button onClick={() => handleSort('time')} className={`sort-btn ${sortBy === 'time' ? 'active' : ''}`}>\n//           Sort by Time\n//         </button>\n//       </div>\n//       <table className=\"customer-table\">\n//         <thead>\n//           <tr>\n//             <th>S.No</th>\n//             <th>Customer Name</th>\n//             <th>Age</th>\n//             <th>Phone</th>\n//             <th>Location</th>\n//             <th>Date</th>\n//             <th>Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {customers.map((customer, index) => (\n//             <tr key={customer.sno}>\n//               <td>{(page - 1) * recordsPerPage + index + 1}</td>\n//               <td>{customer.customer_name}</td>\n//               <td>{customer.age}</td>\n//               <td>{customer.phone}</td>\n//               <td>{customer.location}</td>\n//               <td>{formatDate(customer.created_at)}</td>\n//               <td>{formatTime(customer.created_at)}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <div className=\"pagination\">\n//         <button disabled={page === 1} onClick={() => setPage(page - 1)} className=\"pagination-btn\">\n//           Previous\n//         </button>\n//         <div className=\"page-numbers\">\n//           Page {page} of {totalPages}\n//         </div>\n//         <button disabled={page === totalPages} onClick={() => setPage(page + 1)} className=\"pagination-btn\">\n//           Next\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Import CSS file for styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [customers, setCustomers] = useState([]);\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState('');\n  const [totalPages, setTotalPages] = useState(0);\n  const [sortBy, setSortBy] = useState('date'); // Default sort by date\n\n  const [filteredData, setFilteredData] = useState([]); // Initialize filteredData as an empty array\n\n  const recordsPerPage = 20;\n  useEffect(() => {\n    fetchData();\n  }, [page, search, sortBy]); // Fetch data when page, search, or sortBy changes\n\n  const fetchData = async () => {\n    try {\n      let url = `http://localhost:8080/api/records?page=${page}&search=${search}&sortBy=${sortBy}`;\n\n      if (search) {\n        url += `&customer_name=${search}&location=${search}`;\n      }\n\n      const response = await axios.get(url);\n      setCustomers(response.data.slice((page - 1) * recordsPerPage, page * recordsPerPage));\n      setTotalPages(Math.ceil(response.data.length / recordsPerPage));\n      setFilteredData(response.data); // Update filteredData with response data\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const handleSort = () => {\n    const sortedData = [...filteredData].sort((a, b) => {\n      if (sortBy === 'date') {\n        return new Date(a.created_at) - new Date(b.created_at);\n      } else if (sortBy === 'time') {\n        return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();\n      }\n\n      return 0;\n    });\n    setFilteredData(sortedData);\n  }; // Function to format date and time\n\n\n  const formatDate = dateTimeString => {\n    const date = new Date(dateTimeString);\n    return date.toLocaleDateString();\n  };\n\n  const formatTime = dateTimeString => {\n    const time = new Date(dateTimeString);\n    return time.toLocaleTimeString();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7CKMx3gRrs2bgzoffufA9bcIOgM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","App","customers","setCustomers","page","setPage","search","setSearch","totalPages","setTotalPages","sortBy","setSortBy","filteredData","setFilteredData","recordsPerPage","fetchData","url","response","get","data","slice","Math","ceil","length","error","console","handleSort","sortedData","sort","a","b","Date","created_at","getTime","formatDate","dateTimeString","date","toLocaleDateString","formatTime","time","toLocaleTimeString"],"sources":["C:/Users/Gamma/OneDrive - K L University/Desktop/zithara-task/frontend-react/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'; // Import CSS file for styling\n\n// function App() {\n//   const [customers, setCustomers] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const [search, setSearch] = useState('');\n//   const [totalPages, setTotalPages] = useState(0);\n//   const [sortBy, setSortBy] = useState('date'); // Default sort by date\n//   const [filteredData, setFilteredData] = useState([]);\n//   const recordsPerPage = 20;\n  \n\n//   useEffect(() => {\n//     fetchData();\n//   }, [page, search]);\n\n//   const fetchData = async () => {\n//     try {\n//       let url = `http://localhost:8080/api/records?page=${page}&search=${search}&sortBy=${sortBy}`;\n//       if (search) {\n//         // If search is provided, add search filters for name and location columns\n//         url += `&customer_name=${search}&location=${search}`;\n//       }\n//       const response = await axios.get(url);\n//       setCustomers(response.data.slice((page - 1) * recordsPerPage, page * recordsPerPage));\n//       setTotalPages(Math.ceil(response.data.length / recordsPerPage));\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   // Function to handle sorting when sort button is clicked\n//   // const handleSort = (sortOption) => {\n//   //   if (sortBy !== sortOption) {\n//   //     setSortBy(sortOption);\n//   //     setPage(1); // Reset page to 1 when changing sort option\n//   //   }\n//   // };\n//   useEffect(() => {\n//     handleSort();\n//   }, [sortBy]);\n//   const handleSort = async(sortdate)=>{\n//     let url = `http://localhost:8080/api/records?page=${page}&search=${search}&sortBy=${sortBy}`;\n//     let response = await axios.get(url);\n//     const sortedData = [...filteredData].sort((a,b) =>{\n//       if(sortdate === 'date'){\n//         return new Date(a.created_at) - new Date(b.created_at);\n//       }else if (sortdate === 'time') {\n//         return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();\n//       }\n//     });\n//     setFilteredData({sortedData});     \n//   }\n\n//   // Function to format date and time\n//   const formatDate = (dateTimeString) => {\n//     const date = new Date(dateTimeString);\n//     return date.toLocaleDateString();\n//   };\n\n//   const formatTime = (dateTimeString) => {\n//     const time = new Date(dateTimeString);\n//     return time.toLocaleTimeString();\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1 className=\"heading\">Customer Records</h1>\n//       <div className=\"search-container\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search by Customer Name or Location\"\n//           value={search}\n//           onChange={(e) => setSearch(e.target.value)}\n//           className=\"search-input\"\n//         />\n//         <button onClick={fetchData} className=\"search-btn\">\n//           Search\n//         </button>\n//       </div>\n//       <div className=\"sorting-options\">\n//         <button onClick={ handleSort} className={`sort-btn ${sortBy === 'date' ? 'active' : ''}`}>\n//           Sort by Date\n//         </button>\n//         <button onClick={() => handleSort('time')} className={`sort-btn ${sortBy === 'time' ? 'active' : ''}`}>\n//           Sort by Time\n//         </button>\n//       </div>\n//       <table className=\"customer-table\">\n//         <thead>\n//           <tr>\n//             <th>S.No</th>\n//             <th>Customer Name</th>\n//             <th>Age</th>\n//             <th>Phone</th>\n//             <th>Location</th>\n//             <th>Date</th>\n//             <th>Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {customers.map((customer, index) => (\n//             <tr key={customer.sno}>\n//               <td>{(page - 1) * recordsPerPage + index + 1}</td>\n//               <td>{customer.customer_name}</td>\n//               <td>{customer.age}</td>\n//               <td>{customer.phone}</td>\n//               <td>{customer.location}</td>\n//               <td>{formatDate(customer.created_at)}</td>\n//               <td>{formatTime(customer.created_at)}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <div className=\"pagination\">\n//         <button disabled={page === 1} onClick={() => setPage(page - 1)} className=\"pagination-btn\">\n//           Previous\n//         </button>\n//         <div className=\"page-numbers\">\n//           Page {page} of {totalPages}\n//         </div>\n//         <button disabled={page === totalPages} onClick={() => setPage(page + 1)} className=\"pagination-btn\">\n//           Next\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Import CSS file for styling\n\nfunction App() {\n  const [customers, setCustomers] = useState([]);\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState('');\n  const [totalPages, setTotalPages] = useState(0);\n  const [sortBy, setSortBy] = useState('date'); // Default sort by date\n  const [filteredData, setFilteredData] = useState([]); // Initialize filteredData as an empty array\n  const recordsPerPage = 20;\n\n  useEffect(() => {\n    fetchData();\n  }, [page, search, sortBy]); // Fetch data when page, search, or sortBy changes\n\n  const fetchData = async () => {\n    try {\n      let url = `http://localhost:8080/api/records?page=${page}&search=${search}&sortBy=${sortBy}`;\n      if (search) {\n        url += `&customer_name=${search}&location=${search}`;\n      }\n      const response = await axios.get(url);\n      setCustomers(response.data.slice((page - 1) * recordsPerPage, page * recordsPerPage));\n      setTotalPages(Math.ceil(response.data.length / recordsPerPage));\n      setFilteredData(response.data); // Update filteredData with response data\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const handleSort = () => {\n    const sortedData = [...filteredData].sort((a, b) => {\n      if (sortBy === 'date') {\n        return new Date(a.created_at) - new Date(b.created_at);\n      } else if (sortBy === 'time') {\n        return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();\n      }\n      return 0;\n    });\n    setFilteredData(sortedData);\n  };\n\n  // Function to format date and time\n  const formatDate = (dateTimeString) => {\n    const date = new Date(dateTimeString);\n    return date.toLocaleDateString();\n  };\n\n  const formatTime = (dateTimeString) => {\n    const time = new Date(dateTimeString);\n    return time.toLocaleTimeString();\n  };\n\n  return (\n    <div className=\"container\">\n      {/* Your JSX */}\n    </div>\n  );\n}\n\nexport default App;\n"],"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"},"metadata":{},"sourceType":"module"}